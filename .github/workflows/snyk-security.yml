name: CI/CD Pipeline for Container Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security:
    permissions:
        security-events: write
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Build the Docker image for the legacy application
      - name: Build Docker image
        run: |
          docker build -t patchcorp/legacy-app:latest .

      # Step 3: Run Snyk Container scan on the built image
      - name: Snyk Container Scan
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: patchcorp/legacy-app:latest
          args: --sarif-file-output=snyk.sarif

      # Step 4: Upload result to GitHub Code Scanning
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      # Step 5: Sign the Docker image using Docker Content Trust
      - name: Sign Docker image
        run: |
          export DOCKER_CONTENT_TRUST=1
          docker trust sign patchcorp/legacy-app:latest

      # Step 6: Send a Slack notification for the completed process
      - name: Notify on Slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Legacy application container build, scan, and signing completed successfully. Image: patchcorp/legacy-app:latest."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
